@page "/C_Productos"
@inject HttpClient httpClient
@using PharmaTracker.Shared;

<div class="card-header mt-4">

    <div class="card-header">
        <h3>Consulta de Productos</h3>
    </div>

    <div class="row">

        <div class="col-md-5 mt-3">
            <label>Desde:</label>
            <input type="date" class="form-control" @bind="Desde" />
        </div>

        <div class="col-md-5 mt-3">
            <label>Hasta:</label>
            <input type="date" class="form-control" @bind="Hasta" />
        </div>
    </div>


	<div class="row mt-2">
		<label class="mt-2">Filtrar por:</label>

		<div class="col">
			<select class="form-select" @bind="opciones">
				<option value="" selected>Seleccione una opción</option>
				<option value="0">ID</option>
				<option value="1">Nombre del Producto</option>
				<option value="2">Laboratorio</option>
				<option value="3">Existencia</option>
			</select>
		</div>

		<div class="col-md-4">
			@if (opciones == 0)
			{
				<input type="number" min="0" class="form-control" @bind="auxProducto.ProductoId" />
			}
			else if (opciones == 1)
			{
				<input type="text" class="form-control" @bind="auxProducto.NombreProducto" />
			}
			else if (opciones == 2)
			{
				<input type="text" min="0" class="form-control" @bind="auxProducto.Laboratorio" />
			}
			else if (opciones == 3)
			{
				<div class="col-md-4">
					<label>Existencia:</label>
					<div>
						<label class="form-check-label">
							<input type="radio" class="form-check-input" name="existenciaOption" @onchange="(() => conExistencia = true)" /> Con Existencia
						</label>
					</div>
					<div>
						<label class="form-check-label">
							<input type="radio" class="form-check-input" name="existenciaOption" @onchange="(() => conExistencia = false)" /> Sin Existencia
						</label>
					</div>
				</div>
			}
			
		</div>

		<div class="col col-md-4">
			<button class="btn btn-primary ml-2" type="button" @onclick="Buscar">
				<i class="oi oi-magnifying-glass" />
			</button>
		</div>

	</div>

	<div class="card-body">
		<div class="table-responsive ">
			<table border="1" class="table table-bordered table-striped ">
				<thead>
					<tr class="table-secondary">
						<th>ID</th>
						<th>Fecha</th>
						<th>Nombre del Producto</th>
						<th>Laboratorio</th>
						<th>Precio</th>
						<th>Existencia</th>
						<th>Unidad</th>
						<th>Ver</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var table in productos)
					{
						<tr>
							<td>@table.ProductoId</td>
							<td>@table.Fecha.ToString("MM/dd/yyyy")</td>
							<td>@table.NombreProducto</td>
							<td>@table.Laboratorio</td>
							<td>@table.Precio</td>
							<td>@table.Existencia</td>
							<td>@table.Unidad</td>
							<td><a href="R_Productos/@table.ProductoId"> <i class="oi oi-eye"> </i></a></td>
						</tr>
					}
				</tbody>

				<div class="card-header-tabs">
					<div class="col col-md-mt-4">
						<span class="ml-2">Resultados: @conteo</span>
					</div>
				</div>

			</table>

		</div>
	</div>

</div>

@code {

	public List<Productos> productos { get; set; } = new List<Productos>();
	public Productos auxProducto { get; set; } = new Productos();

	public DateTime Desde { get; set; }
	public DateTime Hasta { get; set; }

	private bool conExistencia = true;
	public int opciones { get; set; }
	public int conteo { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Desde = DateTime.Now.AddMonths(-1);
		Hasta = DateTime.Now;
	}

	public async Task Buscar()
	{
		switch (opciones)
		{
			case 0:
				if (auxProducto.ProductoId != 0)
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta && p.ProductoId == auxProducto.ProductoId).
						ToList();
					StateHasChanged();
				}
				else
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta)
						.ToList();
					StateHasChanged();
				}
				break;

			case 1:
				if (!string.IsNullOrEmpty(auxProducto.NombreProducto))
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta && p.NombreProducto.Contains(auxProducto.NombreProducto))
						.ToList();
					StateHasChanged();
				}
				else
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta)
						.ToList();
					StateHasChanged();
				}
				break;

			case 2:
				if (!string.IsNullOrEmpty(auxProducto.Laboratorio))
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta && p.Laboratorio.Contains(auxProducto.Laboratorio))
						.ToList();
					StateHasChanged();
				}
				else
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta)
						.ToList();
					StateHasChanged();
				}
			break;

			case 3:
				if (conExistencia)
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta && p.Existencia > 0)
						.ToList();
					StateHasChanged();
				}
				else
				{
					productos = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos"))
						.Where(p => p.Fecha >= Desde.Date && p.Fecha <= Hasta && p.Existencia == 0)
						.ToList();
					StateHasChanged();
				}
			break;
		}
		conteo = productos.Count;
    }

}