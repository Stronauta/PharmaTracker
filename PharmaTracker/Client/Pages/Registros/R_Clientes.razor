﻿
@page "/R_Clientes"
@page "/R_Clientes/{ClienteId:int}"
@inject HttpClient httpClient
@inject NotificationService notificationService

@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Administrador, Vendedor")]

<div class="card-header">
	<h3>Registros de Clientes</h3>
</div>


<EditForm Model="Cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">

				@*ID*@
				<div class="col-md-3 mt-2">
					<div class="form-group mb-2">
						<label class="form-label" @for="Cliente.ClienteId">Cliente Id:</label>
						<div class="input-group">
							<InputNumber readonly id="EntradasId" min="0" class="form-control" @bind-Value="Cliente.ClienteId" />
							<ValidationMessage For="@(() => Cliente.ClienteId)" />
						</div>
					</div>
				</div>


				<div class="row">
					@*Nombre*@
					<div class="col-md-6 mt-2">
						<div class="form-group mb-3">
							<label class="form-label" @for="Cliente.Nombre">Nombre:</label>
							<InputText id="Nombre" class="form-control" @bind-Value="Cliente.Nombre" />
							<ValidationMessage For="@(() => Cliente.Nombre)" />
						</div>
					</div>

					@*Telefono*@
					<div class="col-md-3 ms-4 mt-2">
						<label>Tel&eacute;fono:</label>
						<InputText class="form-control" @bind-Value="Cliente.Teléfono" maxlength="10"></InputText>
						<ValidationMessage For="@(() => Cliente.Teléfono)" />
					</div>
				</div>


				<div class="row">

					@*Email*@
					<div class="col-md-6 mt-2">
						<div class="form-group">
							<label for="Email">Email:</label>
							<InputText @bind-Value="Cliente.Email" class="form-control" id="Email" placeholder="Ingrese su correo electr&oacute;nico" />
							<ValidationMessage For="@(() => Cliente.Email)" />
						</div>
					</div>

					@*Password*@
					<div class="col-md-5">
						<div class="form-group ">
							<label class="form-label" @for="Cliente.Contraseña">Contraseña </label>
							<div class="input-group">
								<InputText @bind-Value="Cliente.Contraseña" type="@((mostrarContraseña) ? "text" : "password")" class="form-control" id="Contraseña" placeholder="Ingrese su contraseña" />
								<div class="ms-2">
									<button @onclick="MostrarContraseña" class="btn btn-outline-secondary" type="button">
										@if (mostrarContraseña)
										{
											<i class="oi oi-dial"></i>
										}
										else
										{
											<i class="oi oi-eye"></i>
										}
									</button>
								</div>
								<ValidationMessage For="@(() => Cliente.Contraseña)" />
							</div>
						</div>
					</div>
				</div>

				<div class="col-md-6 mt-2">
					<div class="form-group">
						<label for="Dirección">Direcci&oacute;n:</label>
						<InputTextArea @bind-Value="Cliente.Dirección" class="form-control" id="Dirección" />
						<ValidationMessage For="@(() => Cliente.Dirección)" />
					</div>
				</div>

			</div>
		</div>
		<div class="d-flex justify-content-center mb-4 mt-4">
			<div class="btn-group">
				<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> Nuevo <i class="oi oi-file" /></button>
				<button type="submit" class="btn btn-outline-success" @onclick="Guardar"> Guardar <i class="oi oi-document" /></button>
				<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"> Eliminar <i class="oi oi-trash" /></button>
			</div>
		</div>
	</div>
    
</EditForm>

@code {

    [Parameter]

    public int ClienteId { get; set; }

    public Clientes Cliente { get; set; } = new Clientes();

    public bool mostrarContraseña = false;

    protected override async Task OnInitializedAsync()
    {
        if(ClienteId>0)
        {
            this.Cliente.ClienteId = ClienteId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var clienteNotNull = (await httpClient.GetFromJsonAsync<List<Clientes>>($"api/Clientes")).ToList().Any(a => a.ClienteId == Cliente.ClienteId);
        if (clienteNotNull)
        {
            var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{Cliente.ClienteId}");
				if(clienteEncontrado != null){
					this.Cliente = clienteEncontrado;
					StateHasChanged();
					var mensaje = new NotificationMessage
						{
							Severity = NotificationSeverity.Success,
							Summary = "Busqueda Exitosa",
							Detail = "Se ha encontrado el cliente",
							Duration = 5_000
						};
					notificationService.Notify(mensaje);
				}
			}
			else{
				var mensaje = new NotificationMessage
					{
						Severity = NotificationSeverity.Error,
						Summary = "Busqueda Fallida",
						Detail = "No se ha encontrado el cliente",
						Duration = 5_000
					};
				notificationService.Notify(mensaje);
        }
    }

    public async Task Guardar()
    {
        using var reponse = await httpClient.PostAsJsonAsync("api/Clientes", Cliente);
        if (!reponse.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se pudo registrar",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
            return;
        }

        var clienteDevuelto = await reponse.Content.ReadFromJsonAsync<Clientes>();
        if (clienteDevuelto is not null)
        {
            this.Cliente = clienteDevuelto;
            StateHasChanged();
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Registrado correctamente",
                    Detail = "El cliente fue registrado con éxito",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
            Nuevo();
        }
    }

    public void Nuevo()
    {
        this.Cliente = new Clientes();
        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Nuevo ",
                Detail = "Se ha limpiado las casillas",
                Duration = 5_000
            };
        notificationService.Notify(mensaje);
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Clientes/{Cliente.ClienteId}");
        if(!response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se ha podido eliminar el cliente",
					Duration = 5_000
				};
			notificationService.Notify(mensaje);
			return;
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Eliminado Exitoso",
					Detail = "Se ha eliminado el cliente",
					Duration = 5_000
				};
			notificationService.Notify(mensaje);
			Nuevo();
		}
    }


    public void MostrarContraseña()
    {
        mostrarContraseña = !mostrarContraseña;
    }
}
