@page "/R_Admin"
@page "/R_Admin/{RAdminId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components


@attribute [Authorize(Roles = "Administrador")]
@inject NotificationService notificationService
@inject HttpClient httpClient

<PageTitle>Registro de Admins</PageTitle>

<div class="card-header">
	<h3>Registros de Administradores</h3>
</div>

<EditForm Model="admin" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="container">
        <div class="card shadow-lg">
            <div class="card-header">

				@*ID*@
				<div class="col-md-3 mt-2">
					<div class="form-group mb-2">
						<label class="form-label" @for="admin.AdminId">Admin Id:</label>
						<div class="input-group">
							<InputNumber id="EntradasId" min="0" class="form-control" @bind-Value="admin.AdminId" />
							<ValidationMessage For="@(() => admin.AdminId)" />
							<div class="ms-2">
								<button class="btn btn-primary" type="button" @onclick="Buscar">
									<i class="oi oi-magnifying-glass" />
								</button>
							</div>
						</div>
					</div>
				</div>

				@*Nombre*@
				<div class="col-md-6 mt-2">
					<div class="form-group mb-3">
						<label class="form-label" @for="admin.Nombre">Nombre:</label>
						<InputText id="NombreProducto" class="form-control" @bind-Value="admin.Nombre" />
						<ValidationMessage For="@(() => admin.Nombre)" />
					</div>
				</div>

				<div class="row">

					@*Email*@
					<div class="col-md-6 mt-2">
						<div class="form-group">
							<label for="Email">Email:</label>
							<InputText @bind-Value="admin.Email" class="form-control" id="Email" placeholder="Ingrese su correo electr&oacute;nico" />
							<ValidationMessage For="@(() => admin.Email)" />
						</div>
					</div>

					@*Password*@

					<div class="col-md-5">
						<div class="form-group ">
							<label class="form-label" @for="admin.Contraseña">Contraseña </label>
							<div class="input-group">
								<InputText @bind-Value="admin.Contraseña" type="@((mostrarContraseña) ? "text" : "password")" class="form-control" id="Contraseña" placeholder="Ingrese su contraseña" />
								<div class="ms-2">
									<button @onclick="MostrarContraseña" class="btn btn-outline-secondary" type="button">
										@if (mostrarContraseña)
										{
											<i class="oi oi-dial"></i>
										}
										else
										{
											<i class="oi oi-eye"></i>
										}
									</button>
								</div>
								<ValidationMessage For="@(() => admin.Contraseña)" />
							</div>
						</div>
					</div>

				</div>

				@*Direccion*@
				<div class="col-md-7 mt-3">
					<div class="form-group mb-2">
						<label class="form-label" @for="admin.Dirección">Direcci&oacute;n:</label>
						<InputTextArea id="Dirrecion" class="form-control" @bind-Value="admin.Dirección" />
						<ValidationMessage For="@(() => admin.Dirección)" />
					</div>
				</div>

				@*Aqui te deje para que hagas el detalle *@

				<fieldset class="border-success border border-1">
					<h3>Tel&eacute;fonos del admin</h3>
					<div class="row m-1">
						@*TipoTelefono *@
						<div class="col-2">
							<label>TipoTelefono:</label>
							<InputSelect class="form-select" @bind-Value="TipoTelefonoSeleccionado">
								<option value="0" disabled selected> [Seleccione] </option>
								@foreach (var tipo in TiposTelefonosList)
								{
									<option value="@tipo.AdminTipoId">@tipo.AdminDescripcion </option>
								}
							</InputSelect>
						</div>

						<div class="col-2">
							<label>Telefono</label>
							<InputText class="form-control" @bind-Value="TelefonoSeleccionado"></InputText>
						</div>

						<div class="col-2">
							<br>
							<button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle">
								<span class="oi oi-plus">Agregar</span>
							</button>
						</div>
						@* @if (ValidacionDetalle.Length > 0)
						{
							<label class="text-danger">@ValidacionDetalle</label>
						} *@
					</div>

					<hr />
					<table class="table table-bordered table-light m-1">
						<thead class="thead">
							<tr class="table">
								<th>Tipo Telefono</th>
								<th>Telefono</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in admin.AdminDetalle)
							{
								<tr>
									<td>@(DescripcionTipo(detalle.AdminTipoId))</td>
									<td>@detalle.AdminTelefono</td>
									<td> <button @onclick="@(() => RemoverDetalle(detalle))"><i class="oi oi-trash" /> Eliminar</button>   </td>
								</tr>
							}
						</tbody>
					</table>
					<div class="row justify-content-between">
						<div class="col-4">
							<label>Cantidad Telefonos</label>
							<div class="input-group mb-3">
								<span class="form-control">@admin.AdminDetalle.Count()</span>
							</div>
						</div>
					</div>

					<hr />
				</fieldset>
				
			</div>
		</div>
	</div>
	
	<div class="d-flex justify-content-center mb-4 mt-4">
		<div class="btn-group">
			<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> Nuevo <i class="oi oi-file" /></button>
			<button type="submit" class="btn btn-outline-success" @onclick="Guardar"> Guardar <i class="oi oi-document" /></button>
			<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"> Eliminar <i class="oi oi-trash" /></button>
		</div>
	</div>

</EditForm>


@code {
	[Parameter]
	public int RAdminId { get; set; }

	public Admin admin { get; set; } = new Admin();
	public AdminDetalle adminDetalle { get; set; } = new AdminDetalle();

	public IEnumerable<AdminTiposTelefonos> TiposTelefonosList { get; set; } = Enumerable.Empty<AdminTiposTelefonos>();

	public int TipoTelefonoSeleccionado { get; set; } = 0;
	public string TelefonoSeleccionado { get; set; } = string.Empty;

	public string ValidacionDetalle { get; set; }
	public bool detalleAdmin { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		await CargarTiposTelefonos();

		if (RAdminId > 0)
		{
			this.admin.AdminId = RAdminId; 
			await Buscar();
		}
	}

	private async Task CargarTiposTelefonos()
    {
        var encontrados = await httpClient.GetFromJsonAsync<List<AdminTiposTelefonos>>($"api/AdminTiposTelefonos");
		if (encontrados != null)
        {
            TiposTelefonosList = encontrados;
        }
    }

	@*Guardad, Buscar, Eliminar y Nuevo*@

	public async Task Buscar()
	{
		var adminNotNull = (await httpClient.GetFromJsonAsync<List<Admin>>($"api/Admins"))
							.ToList().Any(a => a.AdminId == admin.AdminId);
		if (adminNotNull)
		{
			var adminEncontrado = await httpClient.GetFromJsonAsync<Admin>($"api/Admins/{admin.AdminId}");
			if (adminEncontrado != null)
			{
				this.admin = adminEncontrado;
				var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Busqueda Exitosa",
					Detail = "Se ha encontrado el administrador",
					Duration = 5_000
				};
				notificationService.Notify(mensaje);
			}
		}
		else
		{
			var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Busqueda Fallida",
					Detail = "No se ha encontrado el administrador",
				Duration = 5_000
			};
			notificationService.Notify(mensaje);
		}
	}

	@*productos.detalleLabProducto ??= new List<DetalleLaboratorioProducto>();

		if (ValidarDetailLab())
		{
			var detalle = new DetalleLaboratorioProducto
				{
					Laboratorios = laboratorioProducto.Laboratorios,
					Cantidad = laboratorioProducto.Cantidad,
				};

			productos.detalleLabProducto.Add(detalle);
			laboratorioProducto = new DetalleLaboratorioProducto();

			CantidadTotal = productos.detalleLabProducto.Sum(d => d.Cantidad);

			await UpdateExistenciaProducto();

			StateHasChanged();
		}


	
		
		
		*@

	public async Task AgregarDetalle()
	{
		admin.AdminDetalle ??= new List<AdminDetalle>();

		if (!ValidarDetalle())
		{
			var detalle = new AdminDetalle
            {
                AdminTipoId = admin.AdminId,
                AdminTelefono = TelefonoSeleccionado
            };
			admin.AdminDetalle.Add(detalle);
			TipoTelefonoSeleccionado = 0;
			TelefonoSeleccionado = string.Empty;
			StateHasChanged();
		}
		return;

		// admin.AdminDetalle.Add(new AdminDetalle()
		// 	{
		// 		AdminTipoId = TipoTelefonoSeleccionado,
		// 		AdminTelefono = TelefonoSeleccionado
		// 	});
		// TipoTelefonoSeleccionado = 0;
		// TelefonoSeleccionado = string.Empty;
		// StateHasChanged();
	}

	public bool ValidarDetalle()
	{
		detalleAdmin = string.IsNullOrEmpty(ValidacionDetalle);

		return !detalleAdmin;


		@*
		public bool detalleLaboratorio = false;
	public bool detalleCantidad = false;
	public bool detallePrecio = false;
	*@
	}

	public string DescripcionTipo(int tipoId)
	{
		var tipoTelefono = TiposTelefonosList.FirstOrDefault(t => t.AdminTipoId == tipoId);

		return tipoTelefono!.AdminDescripcion;
	}

	public void RemoverDetalle(AdminDetalle detalleRemover)
	{
		TipoTelefonoSeleccionado = detalleRemover.AdminTipoId;
		TelefonoSeleccionado = detalleRemover.AdminTelefono;

		admin.AdminDetalle.Remove(detalleRemover);
	}

	public async Task Guardar()
	{
		using var reponse = await httpClient.PostAsJsonAsync("api/Admins", admin);
		if(!reponse.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "Error",
				Detail = "No se ha podido guardar el administrador",
				Duration = 5_000
			};
			notificationService.Notify(mensaje);
			return;
		}

		var adminDevuelto = await reponse.Content.ReadFromJsonAsync<Admin>();
		if(adminDevuelto is not null)
		{
			this.admin = adminDevuelto;
			StateHasChanged();
			var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Guardado Exitoso",
				Detail = "Se ha guardado el administrador",
				Duration = 5_000
			};
			notificationService.Notify(mensaje);
			Nuevo();
		}
	}

	public void Nuevo()
	{
		this.admin = new Admin();
		TipoTelefonoSeleccionado = 0;
		TelefonoSeleccionado = string.Empty;
		var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Nuevo ",
				Detail = "Se ha limpiado las casillas",
				Duration = 5_000
			};
		notificationService.Notify(mensaje);
	}

	public async Task Eliminar()
	{
		using var response = await httpClient.DeleteAsync($"api/Admins/{admin.AdminId}");
		if (!response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se ha podido eliminar el administrador",
					Duration = 5_000
				};
			notificationService.Notify(mensaje);
			return;
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Eliminado Exitoso",
					Detail = "Se ha eliminado el administrador",
					Duration = 5_000
				};
			notificationService.Notify(mensaje);
			Nuevo();
		}
	}

	

	private bool mostrarContraseña = false;

	private void MostrarContraseña()
	{
		mostrarContraseña = !mostrarContraseña;
	}
}
