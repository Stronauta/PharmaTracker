@page "/R_Productos"
@page "/R_Productos/{RProductosId:int}"
@using PharmaTracker.Shared;
@inject NotificationService notificacionesService
@inject HttpClient httpClient

<PageTitle>Registro de Productos</PageTitle>

<div class="card-header">
	<h3>Registros de Productos</h3>
</div>

<EditForm Model="productos" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	@* ID *@
	<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4 mt-4">
		<label class="form-label" @for="productos.ProductoId">Producto Id</label>
		<div class="d-flex align-items-center">
			<InputNumber id="EntradasId" min="0" class="form-control" @bind-Value="productos.ProductoId" />
			<ValidationMessage For="@(() => productos.ProductoId)" />
			<button class="btn btn-primary ml-2" type="button" @onclick="Buscar">
				<i class="oi oi-magnifying-glass" />
			</button>
		</div>
	</div>

	@* Fecha *@
	<div class="col-md-6 mt-2">
		<div Class="form-group mb-2">
			<label class="form-label" @for="productos.Fecha">Fecha:</label>
			<div class="input-group ">
				<InputDate id="Fecha" class="form-control" @bind-Value="productos.Fecha" />
			</div>
		</div>
	</div>

	@* NombreProducto y Unidad *@
	<div class="row">
		<div class="col-md-6 mb-3">
			<label class="form-label" @for="productos.NombreProducto">Nombre del Producto:</label>
			<InputText id="NombreProducto" @bind-Value="productos.NombreProducto" class="form-control" />
			<ValidationMessage For="@(() => productos.NombreProducto)" />
		</div>

		<div class="col-md-4">
			<label class="form-label" for="productos.Unidad">Unidad:</label>
			<div class="input-group">
				<div class="form-group mb-3">
					<InputSelect id="Unidad" class="form-select" @bind-Value="productos.Unidad">
						<option value="" disabled selected>Elija una unidad</option>
						<option value="UD">UD</option>
						<option value="BLI">BLI</option>
						<option value="BARR">BARR</option>
						<option value="BLLA">BLLA</option>
						<option value="SUSP">SUSP</option>
						<option value="PAQ">PAQ</option>
						<option value="SOB">SOB</option>
						<option value="CREM">CREM</option>
						<option value="WIPE">WIPE</option>
						<option value="OVUL">OVUL</option>
						<option value="JER">JER</option>
						<option value="GEL">GEL</option>
						<option value="GOTA">GOTA</option>
						<option value="PARCHE">PARCHE</option>
						<option value="SUP">SUP</option>
						<option value="TAB">TAB</option>
						<option value="POLV">POLV</option>
						<option value="LATA">LATA </option>
					</InputSelect>
				</div>
			</div>
		</div>


	</div>


	@*Detalle laboratorio*@

	<div class="card-header mt-4">

		<h5>Laboratorios</h5>


		<div class="row form-inline align-items-center mt-3">

			@*Laboratorio*@
			<div class="col-md-4">
				<div class="form-group">
					<label>Laboratorio</label>
					<InputText @bind-Value="laboratorioProducto.Laboratorios" class="form-control align-middle" />
					<ValidationMessage For="@(() => laboratorioProducto.Laboratorios)" />
				</div>
			</div>

			@*Existencia*@
			<div class="col-md-2">
				<div class="form-group">
					<label>Cantidad</label>
					<InputNumber id="Existencia" min="0" class="form-control" @bind-Value="laboratorioProducto.Cantidad" />
				</div>
			</div>

			@*Precio*@
			<div class="col-md-2">
				<div class="form-group">
					<label>Precio</label>
					<InputNumber id="Precio" min="0" class="form-control" @bind-Value="laboratorioProducto.Precio" />
				</div>
			</div>

			@*Boton + Add *@
			<div class="col-md-4">
				<div class="form-group">
					<button type="button" class="btn btn-success" @onclick="AddDetailLab">+ Add</button>
				</div>
			</div>

		</div>

		@*Imagen*@
		<div class="col-md-5">
			<div Class="form-group">
				<label class="form-label mt-3" @for="productos.imagen">Foto:</label>
				<div class="input-group">
					<span class="input-group-text">Seleccionar Imagen:</span>
					<InputText @bind-Value="laboratorioProducto.imagen" class="form-control"></InputText>
				</div>
			</div>
		</div>

		<table class="table table-sm mt-4">
			<thead>
				<tr>
					<th>Laboratorio</th>
					<th>Cantidad</th>
					<th>Precio</th>
					<th>Imagen</th>
				</tr>
			</thead>
			<tbody>
				@if (productos.detalleLabProducto != null)
				{
					foreach (var laboratorio in productos.detalleLabProducto)
					{
						<tr>
							<td>@laboratorio.Laboratorios.ToUpper()</td>
							<td>@laboratorio.Cantidad</td>
							<td>RD$@laboratorio.Precio</td>
							<td>@laboratorio.imagen</td>
							<td><button type="button" class="btn btn-danger oi oi-trash" @onclick=@(() => RemoveDetailLab(laboratorio))></button></td>
						</tr>
					}
				}
				<tr>
					<td></td>
					@* <td class="mt-4">Cantidad Total: @CantidadTotal </td> *@
				</tr>
			</tbody>
		</table>
	</div>




	<div class="d-flex justify-content-center mb-4 mt-4">
		<div class="btn-group">
			<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> Nuevo <i class="oi oi-file" /></button>
			<button type="submit" class="btn btn-outline-success" @onclick="Guardar"> Guardar <i class="oi oi-document" /></button>
			<button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
		</div>
	</div>

</EditForm>

@code {
	[Parameter]
	public int RProductosId { get; set; }

	public Productos productos { get; set; } = new Productos();
	public IEnumerable<DetalleLaboratorioProducto> detalleLaboratorioProductos { get; set; } = new List<DetalleLaboratorioProducto>();

	public DescripcionProductoD descripcionProductoD { get; set; } = new DescripcionProductoD();
	public DetalleLaboratorioProducto laboratorioProducto { get; set; } = new DetalleLaboratorioProducto();

	public bool detalleLaboratorio = false;
	public bool detalleCantidad = false;
	public bool detallePrecio = false;

	public int CantidadTotal { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		if (RProductosId > 0)
		{
			this.productos.ProductoId = RProductosId;
			await Buscar();
		}
	}

	@*Guardad, Buscar, Eliminar y Nuevo*@

	public async Task Buscar()
	{
		var productoNotNull = (await httpClient.GetFromJsonAsync<List<Productos>>($"api/Productos")).ToList().Any(p => p.ProductoId == productos.ProductoId);
		if (productoNotNull)
		{
			var productoEncontrado = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{productos.ProductoId}");
			if (productoEncontrado != null)
			{
				this.productos = productoEncontrado;
				StateHasChanged();
			}
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Warning,
					Summary = "Error",
					Detail = "No se encontro el Producto",
					Duration = 5_000
				};
			notificacionesService.Notify(mensaje);
		}
	}

	public async Task Nuevo()
	{
		this.productos = new Productos();
		this.descripcionProductoD = new DescripcionProductoD();

		var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Nuevo ",
				Detail = "Puede introducir una nueva Entrada",
				Duration = 5_000
			};
		notificacionesService.Notify(mensaje);
	}


	public async Task Guardar()
	{
		using var response = await httpClient.PostAsJsonAsync("api/Productos", productos);
		if (!response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se pudo guardar el Producto",
					Duration = 5_000
				};
			notificacionesService.Notify(mensaje);
			return;
		}
		var ProductoGuardado = await response.Content.ReadFromJsonAsync<Productos>();
		if (ProductoGuardado is not null)
		{
			this.productos = ProductoGuardado;
			StateHasChanged();
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Guardado",
					Detail = "Producto Guardado con exito",
					Duration = 5_000
				};
			notificacionesService.Notify(mensaje);
			Nuevo();
		}
	}

	public async Task Eliminar()
	{
		using var reponse = await httpClient.DeleteAsync($"api/Productos/{productos.ProductoId}");
		if (!reponse.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se pudo eliminar el Producto",
					Duration = 5_000
				};
			notificacionesService.Notify(mensaje);
			return;
		}
		else
		{
			Nuevo();
		}
	}

	@*Detalle Laboratorio*@


	bool ValidarDetailLab()
	{
		detalleLaboratorio = string.IsNullOrEmpty(laboratorioProducto.Laboratorios);
		detalleCantidad = laboratorioProducto.Cantidad <= 0;
		detallePrecio = laboratorioProducto.Precio <= 0;

		return !detalleLaboratorio && !detalleCantidad && !detallePrecio;
	}

	public async Task AddDetailLab()
	{
		productos.detalleLabProducto ??= new List<DetalleLaboratorioProducto>();

		if (ValidarDetailLab())
		{
			var detalle = new DetalleLaboratorioProducto
				{
					Laboratorios = laboratorioProducto.Laboratorios,
					Cantidad = laboratorioProducto.Cantidad,
					Precio = laboratorioProducto.Precio
				};

			productos.detalleLabProducto.Add(detalle);
			laboratorioProducto = new DetalleLaboratorioProducto();

			CantidadTotal = productos.detalleLabProducto.Sum(d => d.Cantidad);

			StateHasChanged();
		}
	}

	public async Task RemoveDetailLab(DetalleLaboratorioProducto detalle)
	{
		var detalleEncontrado = productos.detalleLabProducto.FirstOrDefault(d => d.Laboratorios == detalle.Laboratorios && d.Cantidad == detalle.Cantidad && d.Precio == detalle.Precio);
		if (detalleEncontrado != null)
		{
			productos.detalleLabProducto.Remove(detalleEncontrado);
			CantidadTotal -= detalle.Cantidad;
			StateHasChanged();
		}
		else
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se pudo eliminar el detalle. Asegúrese de seleccionar un laboratorio, una cantidad y un precio.",
					Duration = 5_000
				};
			notificacionesService.Notify(mensaje);
		}

	}

	private void CalcularCantidadTotal()
	{
		CantidadTotal = 0;
		foreach (var detalle in productos.detalleLabProducto)
		{
			CantidadTotal += detalle.Cantidad;
		}
	}

}