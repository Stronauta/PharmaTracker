@page "/"
@layout LoginLayout

@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationProvider
@inject NavigationManager navManager
@inject NotificationService notificationService
@using Microsoft.AspNetCore.Components.Authorization


<PageTitle>Login</PageTitle>

<div class="container mt-md-5">
    <div class="row justify-content-md-center">
        <div class="col-sm-6">
            <div class="card">
                <div class="card-header">
                    <h1 class="h2 text-center">PharmaTracker</h1>
                </div>
                <div class="card-body">
                        <div class="form-floating mb-3">
                            <input id="email" class="form-control" @bind="login.Correo" autofocus placeholder="Email" />
                            <label for="email">Email</label>
                        </div>

                        <div class="form-floating mb-3">
                            <input type="password" id="password" class="form-control" placeholder="Password" @bind="login.Clave" />
                            <label for="passwword">Password</label>
                        </div>

                        <div class="d-grid gap-2">
                        <button class="btn btn-lg btn-primary btn-block" type="submit" @onclick="IniciarSesion">Sign in <i class="oi oi-account-login" /></button>
                        </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private LoginDTO login = new LoginDTO();

    private async Task IniciarSesion()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginDTO>("/api/Usuario/Login", login);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<SesionDTO>();
            var authenticationExt = (AuthenticacionExtension)authenticationProvider;
            await authenticationExt.UpdateStatusAuthentication(userSession);

            navManager.NavigateTo("/Index");
        }

        if(loginResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = loginResponse.Content.ReadAsStringAsync().Result,
                Duration = 4_000
            };
            notificationService.Notify(mensaje);
        }
    }
}
