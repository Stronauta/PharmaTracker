@page "/carrito"
@inject ICarritoService CarritoService
@inject HttpClient httpClient
@inject NotificationService notificacionesService
@using PharmaTracker.Shared;
@using System.Security.Claims
@inject AuthenticationStateProvider autenticacionProvider


@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components

@attribute [Authorize]

<div class="row mt-4">
    <div class="col-sm-8">
        <div class="card mb-3">

            <div class="card-header d-flex justify-content-between align-items-center">
                <h3>Su Carrito de Compras:</h3>
                <div>
                    <a class="btn btn-outline-dark flex-lg-shrink-0" href="O_Productos">
                        <i class="oi oi-arrow-thick-left"></i>
                        Volver
                    </a>
                </div>
            </div>

            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm bg-light table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th style="width:102px"></th>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>SubTotal</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (articulosEnCarrito.Any())
                            {
                                foreach (var articulo in articulosEnCarrito)
                                {
                                    <tr>
                                        <td valign="middle">
                                            <div class="img-container">
                                                <img class="card-img-top" src="@articulo.Imagen" alt="@articulo.NombreProducto">
                                            </div>
                                        </td>
                                        <td valign="middle">@articulo.NombreProducto</td>
                                        <td valign="middle">$@articulo.Precio</td>
                                        <td valign="middle" align="center">
                                            <EditForm Model="@articulo">
                                                <InputNumber @bind-Value="@articulo.Cantidad" step="1" min="1" style="width: 70px;" />
                                            </EditForm>
                                        </td>
                                        <td valign="middle"> $@(articulo.Cantidad * articulo.Precio)</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-outline-dark" @onclick="(() => Eliminar(articulo))">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="6">
                                        <div>
                                             Total: $@articulosEnCarrito.Sum(articulo => articulo.Cantidad * articulo.Precio)
                                        </div>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                            No hay productos en el carrito
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (articulosEnCarrito.Any())
                {
                    if (!pagarConTarjeta)
                    {
                        <div class="d-flex justify-content-center mb-4 mt-4">
                            <div class="btn-group">
                                <button type="button" class="btn btn-success" @onclick="RealizarPedido">
                                    Realizar pedido
                                </button>
                            </div>
                        </div>
                    }
                    <div class="mb-2">
                        <label class="form-check-label">
                            <input type="checkbox" class="form-check-input" id="PagarConTarjeta" @bind="pagarConTarjeta" @onclick="NuevoTarjeta" />
                            Pagar con tarjeta
                        </label>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (pagarConTarjeta)
    {
        <div class="col-sm-4">
            <div class="card mb-3">
                <div class="card-body">
                    <EditForm Model="tarjeta" OnValidSubmit="GuardarPago">
                        <DataAnnotationsValidator></DataAnnotationsValidator>

                        <div class="mb-2">
                            <label class="form-label">Nombre Titular</label>
                            <input type="text" class="form-control form-control-sm" placeholder="" @bind-value="tarjeta.Titular" disabled="@disabled">
                            <ValidationMessage For="@(()=>tarjeta.Titular)" />
                        </div>

                        <div class="mb-2">
                            <label class="form-label">N&uacute;mero Tarjeta</label>
                            <input type="text" class="form-control form-control-sm" placeholder="##############" autocomplete="off" @bind-value="tarjeta.NumeroTarjeta" disabled="@disabled" maxlength="16">
                            <ValidationMessage For="@(()=>tarjeta.NumeroTarjeta)" />
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="mb-2">
                                    <label class="form-label">Fecha Expiraci&oacute;n</label>
                                    <input type="text" class="form-control form-control-sm" placeholder="MM/YY" autocomplete="off" @bind-value="tarjeta.FechaExpiracion" disabled="@disabled" maxlength="5">
                                    <ValidationMessage For="@(()=>tarjeta.FechaExpiracion)" />
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="mb-2">
                                    <label class="form-label">CVV</label>
                                    <input type="text" class="form-control form-control-sm" placeholder="###" autocomplete="off" @bind-value="tarjeta.CVV" disabled="@disabled" maxlength="3">
                                    <ValidationMessage For="@(()=>tarjeta.CVV)" />
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="mt-2">
                            <div class="d-grid gap-1">
                                <button class="btn btn-outline-secondary float-end" type="button"  @onclick="GuardarPago">Procesar pago</button>
                            </div>
                        </div>
                    </EditForm>
                    <AuthorizeView>
                        <NotAuthorized>
                            <div class="alert alert-danger mt-2" role="alert">
                                Debe iniciar sesion para poder realizar la compra
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>


                </div>
            </div>
        </div>
    }
</div>


@code {

    public ArticulosEnCarrito articuloEnCarrito = new ArticulosEnCarrito { Cantidad = 1 };
    public List<ArticulosEnCarrito> articulosEnCarrito = new List<ArticulosEnCarrito>();

    private bool disabled = false;
    private bool pagarConTarjeta = false;
    public TarjetaPago tarjeta { get; set; } = new TarjetaPago();

    AuthenticationState usuario;
    Clientes cliente = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        await getUsuario();
        await getCliente();
        articulosEnCarrito = await CarritoService.ObtenerArticulosEnCarrito();

        foreach (var articulo in articulosEnCarrito)
        {
            articulo.Cantidad = 1;
        }
    }

    private async Task Eliminar(ArticulosEnCarrito articulo)
    {
        await CarritoService.EliminarArticulo(articulo);
        articulosEnCarrito = await CarritoService.ObtenerArticulosEnCarrito();
    }

    public void NuevoPedido()
    {
        this.articuloEnCarrito = new ArticulosEnCarrito();
    }

    public async Task RealizarPedido()
    {

        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Pedido Realizado",
                Detail = "Gracias por su pedido. Se ha procesado con éxito.",
                Duration = 3_000 
            };
        notificacionesService.Notify(mensaje);

        NuevoPedido();

    }

    public void NuevoTarjeta()
    {
        this.tarjeta = new TarjetaPago();
    }

    public async Task GuardarPago()
    {
        await Task.Delay(100);
        using var reponse = await httpClient.PostAsJsonAsync("api/TarjetaPago", tarjeta);
        if (!reponse.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se pudo registrar el pago",
					Duration = 5_000
				};
            notificacionesService.Notify(mensaje);
            return;
        }
        var pagoDevuelto = await reponse.Content.ReadFromJsonAsync<TarjetaPago>();
        if (pagoDevuelto is not null)
        {
            this.tarjeta = pagoDevuelto;
            StateHasChanged();
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Pago realizado",
                    Detail = "El pago fue realizado con éxito",
                    Duration = 5_000
                };
            notificacionesService.Notify(mensaje);
            NuevoTarjeta();
        }
    }

    public async Task getUsuario()
    {
        var autenticacionExt = (AuthenticacionExtension)autenticacionProvider;
        usuario = await autenticacionExt.GetAuthenticationStateAsync();
        if (httpClient == null || usuario == null)
        {
            return;
        }
    }
    public async Task getCliente()
    {
        var cliente = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");

        var correoUsuario = usuario.User?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

        if (correoUsuario != null)
        {
            this.cliente = cliente.FirstOrDefault(c => c.Email == correoUsuario);
        }
    }


}
