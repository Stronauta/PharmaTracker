@page "/Registro"
@using Microsoft.AspNetCore.Components.Authorization

@layout LoginLayout

@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationProvider
@inject NavigationManager navManager
@inject NotificationService notificationService

<PageTitle>Registro</PageTitle>
<EditForm Model="Cliente" OnValidSubmit="Guardar">
	<DataAnnotationsValidator/>
    <div class="container mt-md-5">
        <div class="row justify-content-md-center">
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-header text-center">
                        <img src="https://media.discordapp.net/attachments/855103306766352395/1177958331487371284/image.png?ex=6574662f&is=6561f12f&hm=41407a243b348be3b1aeaa524d6ee18dc1b40bbd3928ad074115e1a990b52f01&=&format=webp&width=982&height=420" alt="Logo de PharmaTracker" class="mb-3" style="max-width: 100px;" />

                        <h1 class="h2">PharmaTracker</h1>
                    </div>
                    <div class="card-body">

                        <div class="form-floating mb-2">
                            <InputText type="text" id="Nombre" class="form-control" placeholder="Nombre" @bind-Value="Cliente.Nombre" />
                            <label for="Nombre">Nombre</label>
                        </div>

						<ValidationMessage For="@(() => Cliente.Nombre)" />

                        <div class="form-floating mb-2">
							<InputText type="email" id="email" class="form-control" @bind-Value="Cliente.Email" autofocus placeholder="Correo" />
                            <label for="email">Correo</label>
                        </div>

						<ValidationMessage For="@(() => Cliente.Email)" />

                        <div class="form-floating mb-2">
							<InputText type="text" id="address" class="form-control" placeholder="Dirección" @bind-Value="Cliente.Dirección" />
                            <label for="address">Direcci&oacute;n</label>
                        </div>

						<ValidationMessage For="@(() => Cliente.Dirección)" />

                        <div class="form-floating mb-2">
							<InputText type="text" id="telefono" class="form-control" placeholder="Teléfono" @bind-Value="Cliente.Teléfono" maxlength="10" />
							<label for="telefono">Tel&eacute;fono</label>
                        </div>

						<ValidationMessage For="@(() => Cliente.Teléfono)" />

							<div class="input-group mb-3">
								<div class="form-floating form-floating-group flex-grow-1">
                                    <InputText type=@((mostrarContraseña) ? "text" : "password") class="form-control" name="Contraseña" @bind-Value="Cliente.Contraseña" placeholder="Contraseña" />
                                    <label for="Contraseña">Contraseña</label>
                                </div>
                                <button @onclick="MostrarContraseña" class="btn btn-secondary" type="button">
                                    @if (mostrarContraseña)
                                    {
                                        <i class="oi oi-eye"></i>
                                    }
                                    else
                                    {
                                        <i class="oi oi-dial"></i>
                                    }
                                </button>
							</div>

						<ValidationMessage For="@(() => Cliente.Contraseña)" />

                        <p> ¿Ya tienes una cuenta? <a title="Iniciar Sesión" href="">Inicia Sesión</a></p>

                        <div class="d-grid gap-2">
                            <button class="btn btn-lg btn-primary btn-block" type="submit">Registrarse</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

	public Clientes Cliente { get; set; } = new Clientes();


	public async Task Guardar()
	{
		using var reponse = await httpClient.PostAsJsonAsync("api/Clientes", Cliente);
		if (!reponse.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "Error",
					Detail = "No se pudo registrar",
					Duration = 5_000
				};
			notificationService.Notify(mensaje);
			return;
		}

		var clienteDevuelto = await reponse.Content.ReadFromJsonAsync<Clientes>();
		if (clienteDevuelto is not null)
		{
			this.Cliente = clienteDevuelto;
			StateHasChanged();
			var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Success,
					Summary = "Registrado correctamente",
					Detail = "Inicie sesión con sus datos",
					Duration = 5_000
				};
			notificationService.Notify(mensaje);

			navManager.NavigateTo("");
		}
	}

	public void Nuevo()
	{
		this.Cliente = new Clientes();
		var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Nuevo ",
				Detail = "Se ha limpiado las casillas",
				Duration = 5_000
			};
		notificationService.Notify(mensaje);
	}

	public void FormatoTelefono(ChangeEventArgs e)
	{
		string valor = e.Value.ToString();
		int len = valor.Length;
		if (len > 6)
		{
			Cliente.Teléfono = valor.Substring(0, 3) + "-" + valor.Substring(3, 3) + "-" + valor.Substring(6);
		}
		else if (len == 6)
		{
			Cliente.Teléfono = valor.Substring(0, 3) + "-" + valor.Substring(3);
		}
		else
		{
			Cliente.Teléfono = valor;
		}
	}

	private bool mostrarContraseña = false;

	private void MostrarContraseña()
	{
		mostrarContraseña = !mostrarContraseña;
	}
}
